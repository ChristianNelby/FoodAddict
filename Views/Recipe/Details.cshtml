@model RecipeViewModel
@using FoodAddict.Models.RecipeViewModel
@{
    ViewData["Title"] = "Details";
}

<div class="text-center p-5">
    <h1>@Model.Title</h1>
</div>

<div class="row p-3">
    <div class="col-6 text-right">
        <h4>@Model.MealSize pers.</h4>
    </div>
    <div class="col-6">
        <h4>@Model.MealPreparationTime min</h4>
    </div>
</div>

<div class="row ">
    <div class="col-6 text-center">
        <h3>Ingrediens</h3>
    </div>
    <div class="col-6 text-center">
        <h3>Direction</h3>
    </div>
</div>

<hr />

<div class="row px-5">
    <div class="col-6">
        @foreach (var ingredient in Model.Ingredients)
        {
            <ul>
                <li>

                    @if (ingredient.Amount != 0)
                    {
                        @ingredient.Amount;
                    }

                    @if (ingredient.Unit.Length > 0)
                    {
                        @ingredient.Unit.Trim().ToLower();
                    }

                    @if (ingredient.Name.Length > 0 && ingredient.Amount == 0)
                    {
                        {
                            string firstLetter = ingredient.Name.Trim().First().ToString().ToUpper();
                            string modifiedName = ingredient.Name.Trim().Remove(0, 1).Insert(0, firstLetter);
                            @modifiedName;
                        }
                    }
                    else
                    {
                        @ingredient.Name.Trim().ToLower();
                    }

                    @if(ingredient.Preparations.Length > 0)
                    {
                        {
                            string modifiedPreparations = ", " + ingredient.Preparations.Trim().ToLower();
                            @modifiedPreparations;
                        }
                    }


                </li>
            </ul>
        }
    </div>
    <div class="col-6">
        <p>@Model.Directions</p>
    </div>
</div>